/*!
* @file
* @brief Site
*
* @copyright Copyright (C) University of Bristol 2017
*    This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. 
*    If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
*    See LICENSE file for details.
* @date 23/01/2018
* @author Richard Collins <richard.collins@bristol.ac.uk>
*/

syntax = "proto3";
import "Device.proto";

package cqp.remote;

/// Holds credential details for connecting using keys
/// and certificates to encrypt communications
message Credentials {
    /// Whether they TLS should be turned on
    /// Keys are not necessarily needed for client connections
    bool useTLS = 1;
    /// Filename for the private key file
    string privateKeyFile = 2;
    /// Filename for the certificate chain, to provide a chain of trust
    string rootCertsFile = 3;
    /// Certificate to present when connections are made
    string certChainFile = 4;
}

/// Holds a length of time
message Duration {
    /// union of different amounts of time
    oneof scale {
        /// time measured in milliseconds
        uint64 milliseconds = 1;
        /// time measured in seconds
        uint64 seconds = 2;
    }
}

/// Defines the site and it's capabilities
message Site {
    /// site address
    string url = 1;
    /// devices attached to the site
    repeated DeviceConfig devices = 2;
}

/// An entry point for QKD
message Hop {
    /// The address of the site
    string site = 1;
    /// which device to use in the connection
    string deviceId = 2;
}

/// two points
message HopPair {
    /// left side of a connection
    Hop first = 1;
    /// right side of a connection
    Hop second = 2;
    /// properties for this link
    SessionDetails params = 3;
};

/// Contact details for a site
message SiteAddress {
    /// url
    string url = 1;
}

/// Specification of a QKD path
message PhysicalPathSpec {
    /// left side of a connection
    Hop src = 1;
    /// right side of a connection
    Hop dest = 2;
    /// minimum required latency for the connection
    uint64 latency_ns = 3;
}

/// A list of sites with a port to define an end point
message PhysicalPath {
    /// connections which make up the path
    repeated HopPair hops = 1;
}

/// How keys should be archived
enum BackingStoreKind {
    /// No key storage
    None = 0;
    /// Store on the local file system
    File = 1;
    /// Store in the PCKS system
    PKCS11 = 2;
}

/// Configuration for a site agent, used for loading settings from json
message SiteAgentConfig
{
    /// User readable identifier for display only
    string name = 1;
    /// UUID for the site agent
    string id = 2;
    /// Address if the cqp::remote::INetworkManager interface to register with
    /// Leaving this blank will disable registration
    string netManUri = 3;
    /// A list of QKD device URLs for this site to control
    repeated string deviceUrls = 4;
    /// The address to bind the server to
    string bindAddress = 5;
    /// The port number to bind the server to
    uint32 listenPort = 6;
    // TODO repeated PhysicalPath defaultNodes = 7
    /// The url for others to use to reach this site
    string connectionAddress = 8;
    /// The certificate settings for encrypting connections
    Credentials credentials = 9;
    /// whether to use auto discovery
    bool useAutoDiscover = 10;
    /// connection path for the backing store
    string backingStoreUrl = 11;
    /// Static links to create on startup
    repeated PhysicalPath staticHops = 12;
}
