/*!
* @file
* @brief Tunnels
*
* @copyright Copyright (C) University of Bristol 2017
*    This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. 
*    If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
*    See LICENSE file for details.
* @date 01/02/2018
* @author Richard Collins <richard.collins@bristol.ac.uk>
*/

syntax = "proto3";

import public "google/protobuf/empty.proto";
import public "google/protobuf/wrappers.proto";
import public "Tunnels.proto";

package cqp.remote.tunnels;

/**
 * @brief The ITunnelServer
 * Interface for construction and control of tunnel endpoints
 */
service ITunnelServer
{

    /**
     * @brief GetSupportedSchemes
     * @param response The schemes that this server provides
     * @return success
     */
    rpc GetSupportedSchemes(google.protobuf.Empty) returns (EncryptionSchemes);

    /**
     * @brief GetSettings
     * Retrieve the settings from the endpoint and populate out, the endpoint may return false if not supported
     * @param response The destination of the values
     * @return true if out was updated
     */
    rpc GetControllerSettings(google.protobuf.Empty) returns (ControllerDetails);

    /**
     * @brief ModifyTunnel
     * Add or change the settings for the tunnel
     * changes will not be applied until the tunnel is re-started
     * @param request The tunnel settings to modify
     * @return success
     */
    rpc ModifyTunnel(Tunnel) returns (google.protobuf.Empty);

    /**
     * Remove the settings for a tunnel
     * @param request The tunnel id to delete
     * @return success
     */
    rpc DeleteTunnel(google.protobuf.StringValue) returns (google.protobuf.Empty);

    /**
     * @brief StartEndpoint
     * Enable the tunnel end point, previously defined in the settings
     * @param request Which tunnel to start
     * @return true on success
     * @startuml StartTunnelBehaviour
     *      control "ITunnelServer : left" as left
     *      control "ITunnelServer : right" as right
     *      [-> left : StartEndpoint
     *      left -> right : CompleteTunnel()
     * @enduml
     */
    rpc StartTunnel(google.protobuf.StringValue) returns (google.protobuf.Empty);

    /**
     * @brief StopEndpoint
     * Disable the tunnel end point, previously defined in the settings
     * @param request Which tunnel to stop
     * @return true on success
     */
    rpc StopTunnel(google.protobuf.StringValue) returns (google.protobuf.Empty);

    /////////////// Internal //////////////////

    /**
     * @brief CompleteTunnel
     * @param request Definition of the tunnel endpoint to setup, assumes that the caller has setup the other side of the tunnel
     * @param response The connection address to send encrypted data to
     * @return true on success
     */
    rpc CompleteTunnel(CompleteTunnelRequest) returns (CompleteTunnelResponse);

}
