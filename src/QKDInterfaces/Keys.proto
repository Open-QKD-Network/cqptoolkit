/*!
* @file
* @brief Keys
*
* @copyright Copyright (C) University of Bristol 2018
*    This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. 
*    If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
*    See LICENSE file for details.
* @date 10/08/2018
* @author Richard Collins <richard.collins@bristol.ac.uk>
*/
syntax = "proto3";
import public "Messages.proto";

package cqp.remote;

/// @brief EncryptedDataValues Holds the data and the information needed to decrypt it
message EncryptedDataValues {
    /// The key to use to decrypt the data
    uint64 keyId = 1;
    /// vector data for decryption
    bytes iv = 2;
    /// The data to process
    bytes payload = 3;
}

/// A sites public key
message PublicKey {
    /// The method used to create the key: RSA, etc.
    string format = 1;
    /// The public key
    bytes keyValue = 2;
}

/// Message for key id
message KeyIdValue {
    /// the value
    uint64 keyId = 1;
}

/// message for creating a multihop path
message KeyPathRequest {
    /// The first hops' key id
    uint64 originatingKeyId = 1;
    /// url
    SiteList sites = 2;
}

/// message for generating a key based on two other keys
message CombinedKeyRequest {
    /// Site to the callees left
    string leftSite = 1;
    /// Site to the callees right
    string rightSite = 2;
    /// optional Id for the left key
    oneof leftKey {
        /// optional Id for the left key
        uint64 leftKeyId = 3;
    }
    /// Id for the right key
    uint64 rightKeyId = 4;
}

/// The result of xoring the two keys
message CombinedKeyResponse {
    /// The xord key for alpha and beta
    bytes combinedKey = 1;
    /// The id for the alpha key
    uint64 leftId = 2;
}
