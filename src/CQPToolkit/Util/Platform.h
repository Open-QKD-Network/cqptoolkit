/*!
* @file
* @brief CQP Toolkit - Platform Specific macros
*
* @copyright Copyright (C) University of Bristol 2016
*    This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. 
*    If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
*    See LICENSE file for details.
* @date 08 Feb 2016
* @author Richard Collins <richard.collins@bristol.ac.uk>
*/
#pragma once
#include <string>
#include <sstream>
// This file is generated by the build system for handling __declspec on windows
#include "CQPToolkit/cqptoolkit_export.h"

/// Support for "wide strings" has been removed with great prejudice
/// see http://utf8everywhere.org/ for rational

#if defined(_WIN32)
    /// The definition of a file handle on the current platform
    #define FILE_HANDLE HANDLE
#else //defined(_WIN32)
    /// @def FILE_HANDLE
    /// The definition of a file handle on the current platform
    #define FILE_HANDLE int
#endif // defined(_WIN32)

/// This template provides a standard way to get the size of a C++11 array.
/// @returns the number of elements in the array
template< typename T, size_t N >
constexpr size_t sizeof_array(T(&)[N]) noexcept
{
    return N;
}


#if defined(_MSC_VER)
    /// Provide a common way to access the name of the current function
    #define __PRETTY_FUNCTION__ __FUNCSIG__
#endif // defined(_MSC_VER)

#if defined(_WIN32)
#else
    /// other platforms do not use this
    #define __stdcall
#endif // defined(_WIN32)

// ignore any __stdcall specifiers on linux
#if defined(__GNUC__)
    #define __stdcall
#endif // !defined(_WIN32)
// Platform/compiler defines: https://sourceforge.net/p/predef/wiki/Compilers/

#if defined(__GNUC__) && __GNUC__ < 7
struct EnumClassHash
{
    template <typename T>
    std::size_t operator()(T t) const
    {
        return static_cast<std::size_t>(t);
    }
};
#endif

/// @def CONSTSTRING
/// Macro for defining a constant string
#define CONSTSTRING constexpr const char*

/// @def NAMEDSTRING(Name)
/// Macro for defining a string whos value is the same as it's name
/// @param Name The name of the string and it's value
/// @return Name
#define NAMEDSTRING(Name) \
    CONSTSTRING Name = #Name

// cope with libraries which define --no-exceptions
// use __try instead of try etc
#if __cpp_exceptions
    #define __try      try
    #define __catch(X) catch(X)
    #define __throw_exception_again throw
#else
    #define __try      if (true)
    #define __catch(X) if (false)
    #define __throw_exception_again
#endif
