image: registry.gitlab.com/qcomms/cqptoolkit/buildenv:latest

#DANGER: caches are to share data between runs of a job - not between jobs in a build
# Make one cache per branch per job
#cache:
#  key: "PIPE-$CI_PIPELINE_ID"
#  paths:
#    - build/gcc
#  untracked: true
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  
# group jobs into stages
stages:
  - build
  - check
  - package
  - deploy
  - externals

# The acutal build step
build:linux:
  stage: build
  script:
    - git submodule update --checkout
    - mkdir -p build/gcc
    - cd build/gcc
    - cmake -DCMAKE_BUILD_TYPE=RELWITHDEBINFO -DBUILD_VERSION_PATCH=${CI_PIPELINE_IID} ../..
    - make clean
    - make -j 8 all
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_JOB_STAGE}-${CI_COMMIT_REF_NAME}-${CI_PIPELINE_IID}"
    expire_in: 1 week
    paths:
      - build/gcc

test:
  stage: package
  script:
    - cd build/gcc
    - make test
  dependencies:
    - build:linux
  when: manual

package:doc:
  stage: package
  script:
    - cd build/gcc
    - make doc
  artifacts:
    paths:
      - build/gcc/doc/html
  dependencies:
    - build:linux
  # Only run this stage on the master branch
  #only:
  #  - master

pages:
  stage: deploy
  script:
    - cd build/gcc
    - mv doc/html ../../public/
    - mkdir -p ../../public/ubuntu/dists/release/bionic/main/binary-amd64/
    - mv *.deb ../../public/ubuntu/dists/release/bionic/main/binary-amd64/
# broken
#    - make -C doc/latex -j
#    - mv doc/latex/refman.pdf ../../public/index.pdf
  dependencies:
    - package:doc
    - package:deb
    - package:tar
  # The outputs we want to keep/download
  artifacts:
    paths:
    - public
  # Only run this stage on the master branch
  only:
    - master

package:deb:
  stage: package
  script:
    - cd build/gcc
    - cmake -D CPACK_GENERATOR=DEB -DCMAKE_BUILD_TYPE=RELWITHDEBINFO -DBUILD_VERSION_PATCH=${CI_PIPELINE_IID} ../..
    - make package
  dependencies:
    - build:linux
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_JOB_STAGE}-${CI_COMMIT_REF_NAME}-${CI_PIPELINE_IID}"
    expire_in: 1 month
    paths:
      - build/gcc/*.deb
      - setup/*.deb

package:tar:
  stage: package
  script:
    - cd build/gcc
    - cmake -D CPACK_GENERATOR=TGZ -DCMAKE_BUILD_TYPE=RELWITHDEBINFO -DBUILD_VERSION_PATCH=${CI_PIPELINE_IID} ../..
    - make package
  dependencies:
    - build:linux
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_JOB_STAGE}-${CI_COMMIT_REF_NAME}-${CI_PIPELINE_IID}"
    expire_in: 1 month
    paths:
      - build/gcc/*.tar.gz
  when: manual

deploy:toolkit-build-image:
  stage: deploy
  image: "docker:stable"
  services:
    - docker:dind
  variables:
     DOCKER_HOST: tcp://docker:2375
     DOCKER_DRIVER: overlay2
  script:
    - apk add --no-cache bash
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - cd setup && bash makeDocker.sh -p
  cache:
    policy: pull
  when: manual

deploy:toolkit-run-image:
  stage: deploy
  image: "docker:stable"
  services:
    - docker:dind
  variables:
     DOCKER_HOST: tcp://docker:2375
     DOCKER_DRIVER: overlay2
  script:
    - apk add --no-cache bash
    - cp build/gcc/*.deb setup/
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - cd setup && bash makeDocker.sh -p -u -v ${CI_COMMIT_SHORT_SHA}
  dependencies:
    - package:deb
  cache:
    policy: pull
  # Only run this stage on the master branch
  only:
    - master

externals:nginx:
  stage: externals
  image: "registry.gitlab.com/qcomms/cqptoolkit/runtime"
  services:
    - docker:dind
  variables:
     DOCKER_HOST: tcp://docker:2375
     DOCKER_DRIVER: overlay2
  allow_failure: true
  script:
    - dpkg -i /setup/*.deb
    - apt install -qy docker.io
    - cd external/nginx && bash build_nginx_ubuntu.sh
    - cd external/nginx && docker build -f Dockerfile.ubuntu -t registry.gitlab.com/qcomms/cqptoolkit/nginx-qkd .
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker push registry.gitlab.com/qcomms/cqptoolkit/nginx-qkd
  dependencies:
    - package:deb
    - deploy:toolkit-run-image
  cache:
    policy: pull
  # Only run this stage on the master branch
  only:
    - master
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_JOB_STAGE}-${CI_COMMIT_REF_NAME}-${CI_PIPELINE_IID}"
    expire_in: 1 month
    paths:
      - external/nginx/*.deb

externals:chromium:
  stage: externals
  image: "registry.gitlab.com/qcomms/cqptoolkit/runtime"
  allow_failure: true
  script:
    - dpkg -i /setup/*.deb
    - cd external/chromium && bash build_ubuntu.sh
  dependencies:
    - package:deb
    - deploy:toolkit-run-image
  cache:
    policy: pull
  # Only run this stage on the master branch
  only:
    - master
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_JOB_STAGE}-${CI_COMMIT_REF_NAME}-${CI_PIPELINE_IID}"
    expire_in: 1 month
    paths:
      - external/chromium/chromium-*.deb
  when: manual

check:sast:
  stage: check
  image: docker:stable
  dependencies:
    - build:linux
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}"
        --volume "$PWD/src:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
  artifacts:
    reports:
      sast: src/gl-sast-report.json

check:code_quality:
  stage: check
  dependencies:
    - build:linux
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SOURCE_CODE="$PWD/src"
        --volume "$PWD/src":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    reports:
      codequality: src/gl-code-quality-report.json
