diff -prN -x debian chromium-69.0.3497.81/net/BUILD.gn mod/net/BUILD.gn
*** chromium-69.0.3497.81/net/BUILD.gn	2018-09-04 20:09:57.000000000 +0100
--- mod/net/BUILD.gn	2018-10-16 11:56:09.039461941 +0100
*************** config("net_internal_config") {
*** 83,88 ****
--- 83,92 ----
      include_dirs = [ "/usr/include/kerberosV" ]
    }
  
+   if (use_psk) {
+     defines += [ "USE_PSK" ]
+   }
+ 
    if (enable_built_in_dns) {
      defines += [ "ENABLE_BUILT_IN_DNS" ]
    }
*************** component("net") {
*** 380,385 ****
--- 384,393 ----
      ":net_deps",
    ]
  
+   if (use_psk) {
+     deps += [ "//third_party/cqp:cqptoolkit" ]
+   }
+ 
    public_deps = [
      ":net_public_deps",
      "//net/dns",
diff -prN -x debian chromium-69.0.3497.81/net/features.gni mod/net/features.gni
*** chromium-69.0.3497.81/net/features.gni	2018-09-04 20:09:58.000000000 +0100
--- mod/net/features.gni	2018-10-16 11:56:09.039461941 +0100
*************** declare_args() {
*** 39,44 ****
--- 39,47 ----
    # willing to take the responsibility to make sure that all important
    # connections use HTTPS.
    include_transport_security_state_preload_list = true
+ 
+   # allow pre-shared keys
+   use_psk = false
  }
  
  declare_args() {
diff -prN -x debian chromium-69.0.3497.81/net/socket/ssl_client_socket_impl.cc mod/net/socket/ssl_client_socket_impl.cc
*** chromium-69.0.3497.81/net/socket/ssl_client_socket_impl.cc	2018-09-04 20:09:58.000000000 +0100
--- mod/net/socket/ssl_client_socket_impl.cc	2018-10-23 14:08:15.203031187 +0100
***************
*** 66,71 ****
--- 66,77 ----
  #include "third_party/brotli/include/brotli/decode.h"
  #endif
  
+ #if defined(USE_PSK)
+ #include "CQPUI/OpenSSLKeyUI.h"
+ #else
+ #error "PSK not enabled"
+ #endif
+ 
  namespace net {
  
  namespace {
*************** class SSLClientSocketImpl::SSLContext {
*** 348,353 ****
--- 354,362 ----
  
      SSL_CTX_set_info_callback(ssl_ctx_.get(), InfoCallback);
      SSL_CTX_set_msg_callback(ssl_ctx_.get(), MessageCallback);
+ #if defined(USE_PSK)
+     cqp::ui::OpenSSLKeyUI::Register(ssl_ctx_.get());
+ #endif
  
  #if !defined(NET_DISABLE_BROTLI)
      SSL_CTX_add_cert_compression_alg(
*************** int SSLClientSocketImpl::Init() {
*** 944,950 ****
--- 953,963 ----
  
    // Use BoringSSL defaults, but disable HMAC-SHA1 ciphers in ECDSA. These are
    // the remaining CBC-mode ECDSA ciphers.
+ #if defined(USE_PSK)
+   std::string command("ALL::!ECDSA+SHA1:!kRSA+AESGCM");
+ #else
    std::string command("ALL::!aPSK:!ECDSA+SHA1");
+ #endif
  
    if (ssl_config_.require_ecdhe)
      command.append(":!kRSA");
diff -prN -x debian chromium-69.0.3497.81/third_party/cqp/BUILD.gn mod/third_party/cqp/BUILD.gn
*** chromium-69.0.3497.81/third_party/cqp/BUILD.gn	1970-01-01 01:00:00.000000000 +0100
--- mod/third_party/cqp/BUILD.gn	2018-10-23 16:27:45.907213655 +0100
***************
*** 0 ****
--- 1,12 ----
+ 
+ config("cqptoolkit_config")
+ {
+     #include_dirs = [ "/home/rc15345/code/CQPToolkit/src/", "/home/rc15345/code/CQPToolkit/build/gcc/src/" ]
+     include_dirs = [ "/usr/include/x86_64-linux-gnu/qt5/QtWidgets/", "/usr/include/x86_64-linux-gnu/qt5/" ]
+     #lib_dirs = [ "/home/rc15345/code/CQPToolkit/build/gcc/src/CQPToolkit" ]
+     libs = [ "CQPUI-x86_64", "curl", "Qt5Widgets", "Qt5Core" ]
+ }
+ 
+ shared_library("cqptoolkit") {
+     public_configs = [ ":cqptoolkit_config" ]
+ }
